apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: ops-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics
rules:
  - apiGroups: [""]
    resources: ["configmaps","secrets","nodes","pods","services","serviceaccounts","resourcequotas","replicationcontrollers","limitranges","namespaces","persistentvolumes","persistentvolumeclaims","endpoints"]
    verbs: ["list","watch"]
  - apiGroups: ["apps"]
    resources: ["daemonsets","deployments","replicasets","statefulsets"]
    verbs: ["list","watch"]
  - apiGroups: ["batch"]
    resources: ["jobs","cronjobs"]
    verbs: ["list","watch"]
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["list","watch"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["list","watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["list","watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses","networkpolicies"]
    verbs: ["list","watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses","volumeattachments"]
    verbs: ["list","watch"]
  - apiGroups: ["discovery.k8s.io"]
    resources: ["endpointslices"]
    verbs: ["list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: kube-state-metrics
    namespace: ops-monitoring
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: ops-monitoring
  labels:
    app.kubernetes.io/name: kube-state-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube-state-metrics
    spec:
      serviceAccountName: kube-state-metrics
      containers:
        - name: kube-state-metrics
          image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.17.0
          ports:
            - { name: http, containerPort: 8080 }
            - { name: telemetry, containerPort: 8081 }
          resources:
            requests: { cpu: 50m, memory: 100Mi }
            limits:   { cpu: 300m, memory: 300Mi }
---
apiVersion: v1
kind: Service
metadata:
  name: kube-state-metrics
  namespace: ops-monitoring
  labels:
    app.kubernetes.io/name: kube-state-metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    # prometheus.io/path: "/metrics"   # optional (Default ist /metrics)
spec:
  selector:
    app.kubernetes.io/name: kube-state-metrics
  ports:
    - { name: http, port: 8080, targetPort: http }
