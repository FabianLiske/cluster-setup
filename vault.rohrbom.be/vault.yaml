apiVersion: v1
kind: Namespace
metadata:
  name: svc-vaultwarden
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vaultwarden-config
  namespace: svc-vaultwarden
data:
  DOMAIN: "https://vault.rohrbom.be"
  WEB_VAULT_ENABLED: "true"
  SIGNUPS_ALLOWED: "false"
  SIGNUPS_VERIFY: "true"
  SIGNUPS_VERIFY_RESEND_TIME: "3600"
  SIGNUPS_VERIFY_RESEND_LIMIT: "5"
  SENDS_ALLOWED: "false"
  EMERGENCY_ACCESS_ALLOWED: "false"
  LOGIN_RATELIMIT_MAX_BURST: "10"
  LOGIN_RATELIMIT_SECONDS: "60"
  ADMIN_RATELIMIT_MAX_BURST: "10"
  ADMIN_RATELIMIT_SECONDS: "60"

  ROCKET_LOG: "critical"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vaultwarden-data
  namespace: svc-vaultwarden
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: longhorn-2r
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vaultwarden
  namespace: svc-vaultwarden
  labels: { app: vaultwarden }
spec:
  replicas: 1
  selector: { matchLabels: { app: vaultwarden } }
  template:
    metadata: { labels: { app: vaultwarden } }
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: vaultwarden
          image: vaultwarden/server:latest
          imagePullPolicy: IfNotPresent
          ports: [{ name: http, containerPort: 80 }]
          envFrom:
            - configMapRef: { name: vaultwarden-config }
            - secretRef:    { name: vaultwarden-secret }
          volumeMounts:
            - { name: data, mountPath: /data }
          resources:
            requests: { cpu: 100m, memory: 256Mi }
            limits:   { cpu: 1000m, memory: 1Gi }
          readinessProbe:
            httpGet: { path: /, port: http }
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /, port: http }
            initialDelaySeconds: 30
            periodSeconds: 20
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: vaultwarden-data }
---
apiVersion: v1
kind: Service
metadata:
  name: vaultwarden
  namespace: svc-vaultwarden
spec:
  type: ClusterIP
  selector: { app: vaultwarden }
  ports:
    - { name: http, port: 80, targetPort: http }
---
# Öffentlicher Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vaultwarden
  namespace: svc-vaultwarden
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-dns
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/hsts: "true"
    nginx.ingress.kubernetes.io/hsts-max-age: "2592000"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  ingressClassName: nginx
  rules:
    - host: vault.rohrbom.be
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service: { name: vaultwarden, port: { number: 80 } }
  tls:
    - hosts: [vault.rohrbom.be]
      secretName: vaultwarden-tls
---
# Ingress für /admin
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vaultwarden-admin
  namespace: svc-vaultwarden
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-dns
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: "192.168.1.156,192.168.60.10"
spec:
  ingressClassName: nginx
  rules:
    - host: vault.rohrbom.be
      http:
        paths:
          - path: /admin
            pathType: Prefix
            backend:
              service: { name: vaultwarden, port: { number: 80 } }
  tls:
    - hosts: [vault.rohrbom.be]
      secretName: vaultwarden-tls
---
# Traffic nur aus public NS
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-only-from-vlan30-ingress
  namespace: svc-vaultwarden
spec:
  podSelector: { matchLabels: { app: vaultwarden } }
  policyTypes: [Ingress]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-vlan30-public
      ports:
        - protocol: TCP
          port: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vaultwarden-egress-deny
  namespace: svc-vaultwarden
spec:
  podSelector:
    matchLabels: { app: vaultwarden }
  policyTypes: [Egress]
  egress: []
